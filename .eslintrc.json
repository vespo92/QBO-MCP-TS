{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "env": {
    "node": true,
    "es2022": true,
    "jest": true
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "promise",
    "security",
    "n"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:promise/recommended",
    "plugin:security/recommended-legacy",
    "plugin:n/recommended",
    "prettier"
  ],
  "rules": {
    // TypeScript Rules - Balanced for MCP Server
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports"
      }
    ],
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/no-base-to-string": "warn",
    "@typescript-eslint/no-redundant-type-constituents": "warn",
    
    // Import Rules
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "type"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "import/no-duplicates": "error",
    "import/no-cycle": "warn",
    "import/no-unresolved": "error",
    "import/no-default-export": "off",
    "import/prefer-default-export": "off",
    
    // Promise Rules
    "promise/always-return": "warn",
    "promise/catch-or-return": "error",
    "promise/no-nesting": "warn",
    "promise/no-promise-in-callback": "warn",
    "promise/no-callback-in-promise": "warn",
    "promise/avoid-new": "off",
    "promise/no-return-in-finally": "error",
    "promise/valid-params": "error",
    
    // Security Rules
    "security/detect-object-injection": "off",
    "security/detect-non-literal-fs-filename": "warn",
    "security/detect-eval-with-expression": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-new-buffer": "warn",
    "security/detect-possible-timing-attacks": "off",
    
    // Node.js Rules
    "n/no-deprecated-api": "error",
    "n/no-extraneous-import": "error",
    "n/no-missing-import": "off",
    "n/no-unpublished-import": "off",
    "n/no-unsupported-features/es-syntax": "off",
    "n/no-unsupported-features/node-builtins": "error",
    "n/prefer-global/process": "error",
    "n/prefer-promises/fs": "warn",
    "n/prefer-promises/dns": "warn",
    "n/no-sync": "off",
    
    // General Best Practices
    "no-console": [
      "warn",
      {
        "allow": ["warn", "error", "info", "debug", "trace"]
      }
    ],
    "no-debugger": "error",
    "no-var": "error",
    "prefer-const": "error",
    "prefer-template": "warn",
    "prefer-arrow-callback": "warn",
    "no-throw-literal": "error",
    "no-return-await": "off",
    "@typescript-eslint/return-await": ["error", "in-try-catch"],
    "require-await": "off",
    "@typescript-eslint/require-await": "warn",
    "no-duplicate-imports": "off",
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "error",
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": [
      "warn",
      {
        "allow": ["arrowFunctions", "constructors", "methods"]
      }
    ],
    "dot-notation": "off",
    "@typescript-eslint/dot-notation": "warn",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "error",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true,
        "variables": true,
        "typedefs": false
      }
    ],
    
    // Code Complexity Guidelines (warnings only)
    "max-lines": ["warn", { "max": 500, "skipBlankLines": true, "skipComments": true }],
    "max-lines-per-function": ["warn", { "max": 150, "skipBlankLines": true, "skipComments": true }],
    "complexity": ["warn", 20],
    "max-depth": ["warn", 5],
    "max-nested-callbacks": ["warn", 4],
    "max-params": ["warn", 5]
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.spec.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "max-lines-per-function": "off",
        "max-nested-callbacks": "off"
      }
    },
    {
      "files": ["src/index.ts"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["*.config.js", "*.config.ts", "*.config.mjs"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["src/tools/**/*.ts", "src/resources/**/*.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "warn",
        "max-lines-per-function": ["warn", 200]
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"]
    }
  }
}